openapi: 3.0.0
servers:
  - description: Local Express Server
    url: http://localhost:3000
  - description: SwaggerHub Mock Server
    url: https://virtserver.swaggerhub.com/harelbrener/api1/1.0.0

info:
  title: Grandma's Recipes API
  version: "1.0.0"
  description: This is a simple API
  contact:
    email: harelbr@post.bgu.ac.il
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'

tags:
  - name: auth
    description: Authentication endpoints
  - name: recipes
    description: Operations on Spoonacular recipes
  - name: users
    description: User‐specific operations (requires authentication)

paths:
  /auth/Register:
    post:
      tags:
        - auth
      summary: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRegistration'
            example:
              username: johndoe
              firstname: John
              lastname: Doe
              country: Israel
              email: johndoe@example.com
              password: Abc@1234
              profilePic: https://example.com/images/johndoe.jpg
      responses:
        "201":
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericSuccessResponse'
        "409":
          description: Username already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/Login:
    post:
      tags:
        - auth
      summary: Login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserLogin'
            example:
              username: johndoe
              password: Abc@1234
      responses:
        "200":
          description: Login succeeded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericSuccessResponse'
        "401":
          description: Username or password incorrect
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/Logout:
    post:
      tags:
        - auth
      summary: Logout the current user
      responses:
        "200":
          description: Logout succeeded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericSuccessResponse'

  /recipes/search:
    get:
      tags:
        - recipes
      summary: Get a list of Spoonacular recipes by search parameters
      parameters:
        - in: query
          name: query
          schema:
            type: string
          description: Search keyword(s) for recipe title or ingredients
        - in: query
          name: cuisine
          schema:
            type: string
          description: Cuisine type (e.g., Italian, Mexican)
        - in: query
          name: diet
          schema:
            type: string
          description: Diet type (e.g., vegetarian, vegan)
        - in: query
          name: intolerances
          schema:
            type: string
          description: Comma-separated list of intolerances (e.g., gluten)
        - in: query
          name: number
          schema:
            type: integer
            minimum: 1
            example: 10
          description: Number of results to return (default 5)
      responses:
        "200":
          description: A list of Spoonacular recipe preview objects matching the search
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RecipePreview'
        "402":
          description: Spoonacular quota exceeded (Payment Required)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /recipes/random:
    get:
      tags:
        - recipes
      summary: Get a list of random Spoonacular recipes
      parameters:
        - in: query
          name: number
          required: true
          schema:
            type: integer
            minimum: 1
          description: Number of random recipes to retrieve
      responses:
        "200":
          description: A list of random Spoonacular recipe preview objects
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RecipePreview'
        "402":
          description: Spoonacular quota exceeded (Payment Required)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /recipes/information:
    get:
      tags:
        - recipes
      summary: Get full details of a Spoonacular recipe by its ID
      parameters:
        - in: query
          name: id
          required: true
          schema:
            type: integer
          description: The Spoonacular recipe ID
      responses:
        "200":
          description: Spoonacular recipe details object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RecipeDetails'
        "404":
          description: Recipe not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "402":
          description: Spoonacular quota exceeded (Payment Required)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /recipes/home:
    get:
      tags:
        - recipes
      summary: Get Spoonacular recipe details for multiple IDs
      parameters:
        - in: query
          name: ids
          required: true
          schema:
            type: string
            example: "1,2,3,4"
          description: |
            Comma-separated list of Spoonacular recipe IDs (e.g. `?ids=7,8,9,10`).
            Only unique, valid integers are considered; duplicates and non‐numeric entries are ignored.
      responses:
        "200":
          description: Successfully fetched Spoonacular recipe details for valid IDs
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RecipeDetails'
        "400":
          description: Bad request – missing or malformed `ids` parameter
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "402":
          description: Spoonacular quota exceeded (Payment Required)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /users/favorites:
    get:
      tags:
        - users
      summary: Get favorite Spoonacular recipe IDs saved by the logged‐in user
      responses:
        "200":
          description: Array of Spoonacular recipe IDs
          content:
            application/json:
              schema:
                type: array
                items:
                  type: integer
        "401":
          description: Unauthorized (user not logged in)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    post:
      tags:
        - users
      summary: Save a Spoonacular recipe ID to the logged‐in user's favorites
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - recipeId
              properties:
                recipeId:
                  type: integer
                  description: The Spoonacular recipe ID to mark as favorite
            example:
              recipeId: 716429
      responses:
        "200":
          description: Recipe successfully saved as favorite
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericSuccessResponse'
        "401":
          description: Unauthorized (user not logged in)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /users/history:
    get:
      tags:
        - users
      summary: Get the last three Spoonacular recipe IDs viewed by the logged‐in user
      responses:
        "200":
          description: Array of Spoonacular recipe IDs from viewing history
          content:
            application/json:
              schema:
                type: array
                items:
                  type: integer
        "401":
          description: Unauthorized (user not logged in)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /users/likespooncular:
    post:
      tags:
        - users
      summary: Toggle like status for a Spoonacular recipe
      parameters:
        - in: query
          name: id
          required: true
          schema:
            type: integer
          description: The Spoonacular recipe ID to like/unlike
      responses:
        "200":
          description: Spoonacular recipe like status updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericSuccessResponse'
        "401":
          description: Unauthorized (user not logged in)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'


  /users/familyRecipes:
    get:
      tags:
        - users
      summary: Get family recipes from database for the logged‐in user
      responses:
        "200":
          description: Array of family recipe objects
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/FamilyRecipe'
        "401":
          description: Unauthorized (user not logged in)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    post:
      tags:
        - users
      summary: Add a new family recipe for the logged‐in user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewFamilyRecipe'
            example:
              title: "חמין שבת"
              owner: "סבתא רחל"
              occasion: "שבת"
              ingredients: "שעועית, תפוחי אדמה, בשר, ביצים, זעתר, מלח, מים"
              instructions: |
                1) לטבול ולהשרות את השעועית בלילה קודם.
                2) למקם את כל החומרים בקומקום של חמין: שמים שעועית, תפוחי אדמה, בשר חתוך, וביצים קלופות.
                3) מוסיפים מים עד לכיסוי, מתבלים במלח וזעתר.
                4) מבשלים על אש נמוכה במשך ~12 שעות (לילה שלם).
                5) מגישים חם בבוקר עם לחם טרי.
      responses:
        "201":
          description: Family recipe added successfully (plain text)
          content:
            text/plain:
              schema:
                type: string
                example: "Family recipe added successfully"
        "400":
          description: Bad request (missing or invalid fields)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "401":
          description: Unauthorized (user not logged in)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

components:
  schemas:
    UserRegistration:
      type: object
      required:
        - username
        - firstname
        - lastname
        - country
        - email
        - password
      properties:
        username:
          type: string
        firstname:
          type: string
        lastname:
          type: string
        country:
          type: string
        email:
          type: string
          format: email
        password:
          type: string
        profilePic:
          type: string
          format: uri

    UserLogin:
      type: object
      required:
        - username
        - password
      properties:
        username:
          type: string
        password:
          type: string

    RecipePreview:
      type: object
      properties:
        id:
          type: integer
          description: The unique Spoonacular recipe ID
        title:
          type: string
        image:
          type: string
          format: uri
        popularity:
          type: integer
          description: Aggregated likes count (Spoonacular + user likes)
        vegan:
          type: boolean
        vegetarian:
          type: boolean
        glutenFree:
          type: boolean

    RecipeDetails:
      type: object
      properties:
        id:
          type: integer
          description: The unique Spoonacular recipe ID
        title:
          type: string
        readyInMinutes:
          type: integer
          description: Time (in minutes) to prepare and cook the recipe
        image:
          type: string
          format: uri
        popularity:
          type: integer
          description: Aggregated likes count (Spoonacular + user likes)
        vegan:
          type: boolean
        vegetarian:
          type: boolean
        glutenFree:
          type: boolean
        servings:
          type: integer
          description: Number of servings the recipe yields
        ingredients:
          type: array
          description: List of ingredients (id, name, amount, unit)
          items:
            type: object
            properties:
              id:
                type: integer
              name:
                type: string
              amount:
                type: number
              unit:
                type: string
        instructions:
          type: array
          description: List of preparation steps
          items:
            type: object
            properties:
              number:
                type: integer
              step:
                type: string

    FamilyRecipe:
      type: object
      properties:
        recipe_id:
          type: integer
          description: Unique recipe ID for this user
        title:
          type: string
          description: Title of the family recipe
        owner:
          type: string
          description: Who the recipe belongs to (e.g., "סבתא רחל")
        occasion:
          type: string
          description: When it is traditionally prepared (e.g., "שבת", "פסח")
        ingredients:
          type: string
          description: List of ingredients (comma-separated or JSON string)
        instructions:
          type: string
          description: Full preparation instructions

    NewFamilyRecipe:
      type: object
      required:
        - title
        - owner
        - occasion
        - ingredients
        - instructions
      properties:
        title:
          type: string
          description: Title of the family recipe
        owner:
          type: string
          description: Who the recipe belongs to
        occasion:
          type: string
          description: When it is traditionally prepared
        ingredients:
          type: string
          description: List of ingredients (comma-separated or JSON string)
        instructions:
          type: string
          description: Full preparation instructions

    GenericSuccessResponse:
      type: object
      properties:
        message:
          type: string
        success:
          type: boolean

    ErrorResponse:
      type: object
      properties:
        status:
          type: integer
        message:
          type: string
      example:
        status: 400
        message: "Bad request"
